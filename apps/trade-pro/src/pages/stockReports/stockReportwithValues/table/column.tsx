import { AntColumnType } from '@tradePro/globalTypes';
import { numberFormatter } from '@tradePro/utils/numberFormatter';
import { TStockReportDetail } from '../types';
import { Link } from 'react-router-dom';

export const columns = (t?: any): AntColumnType<TStockReportDetail>[] => [
  {
    width: 300,
    title: <>{t('account_title')}</>,
    dataIndex: 'AccountTitle',
    searchableInput: true,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.AccountTitle.localeCompare(b.AccountTitle),
    render: (_, { AccountTitle }) => <Link to="/Inventory-Evaluation-Item-Ledger">{AccountTitle}</Link>,
  },

  {
    title: <>{t('item_name')}</>,
    dataIndex: 'ItemName',
    width: 300,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.ItemName.localeCompare(b.ItemName),
    render: (_, { ItemName }) => <Link to={`/Inventory-Evaluation-Item-Ledger`}>{ItemName}</Link>,
  },
  {
    title: <>{t('opening_quantity')}</>,
    showTotal: true,
    dataIndex: 'OpQty',
    width: 200,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.OpQty - b.OpQty,
    render: (_, { OpQty }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(OpQty)}</span>,
  },
  {
    title: <>{t('quantity_in')}</>,
    dataIndex: 'QtyIn',
    showTotal: true,
    width: 150,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.QtyIn - b.QtyIn,
    render: (_, { QtyIn }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(QtyIn)}</span>,
  },
  {
    width: 150,
    showTotal: true,
    title: <>{t('quantity_out')}</>,
    dataIndex: 'QtyOut',
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.QtyOut - b.QtyOut,
    render: (_, { QtyOut }) => <span style={{ marginLeft: '70%' }}>{numberFormatter(QtyOut)}</span>,
  },
  {
    width: 180,
    title: <>{t('balance_quantity')}</>,
    dataIndex: 'BalQty',
    showTotal: true,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.BalQty - b.BalQty,
    render: (_, { BalQty }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(BalQty)}</span>,
  },
  {
    width: 180,
    showTotal: true,
    title: <>{t('opening_weight')}</>,
    dataIndex: 'OpWeight',
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.OpWeight - b.OpWeight,
    render: (_, { OpWeight }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(OpWeight)}</span>,
  },
  {
    width: 150,
    title: <>{t('weight_in')}</>,
    dataIndex: 'WeightIn',
    showTotal: true,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.WeightIn - b.WeightIn,
    render: (_, { WeightIn }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(WeightIn)}</span>,
  },
  {
    width: 150,
    title: <>{t('weight_out')}</>,
    dataIndex: 'WeightOut',
    showTotal: true,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.WeightOut - b.WeightOut,
    render: (_, { WeightOut }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(WeightOut)}</span>,
  },
  {
    width: 150,
    showTotal: true,
    title: <>{t('balance_weight')}</>,
    showAverage: true,
    dataIndex: 'BalWeight',
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.BalWeight - b.BalWeight,
    render: (_, { BalWeight }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(BalWeight)}</span>,
  },
  {
    width: 180,
    showTotal: true,
    title: <>{t('opening_amount')}</>,
    dataIndex: 'OpAmount',
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.OpAmount - b.OpAmount,
    render: (_, { OpAmount }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(OpAmount)}</span>,
  },
  {
    width: 150,
    title: <>{t('amount_in')}</>,
    dataIndex: 'AmountIn',
    showTotal: true,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.AmountIn - b.AmountIn,
    render: (_, { AmountIn }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(AmountIn)}</span>,
  },
  {
    width: 150,
    title: <>{t('amount_out')}</>,
    dataIndex: 'AmountOut',
    showTotal: true,
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.AmountOut - b.AmountOut,
    render: (_, { AmountOut }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(AmountOut)}</span>,
  },

  {
    width: 180,
    showTotal: true,
    title: <>{t('balance_amount')}</>,
    dataIndex: 'BalAmount',
    sortDirections: ['ascend', 'descend'],
    sorter: (a, b) => a.BalAmount - b.BalAmount,
    render: (_, { BalAmount }) => <span style={{ marginLeft: '20%' }}>{numberFormatter(BalAmount)}</span>,
  },
];
